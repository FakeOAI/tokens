import{_ as s,c as i,o as t,ae as e}from"./chunks/framework.Dh1jimFm.js";const l="/3721744442804_.pic.jpg",g=JSON.parse('{"title":"Grok 平台","description":"","frontmatter":{},"headers":[],"relativePath":"llm/grok.md","filePath":"llm/grok.md","lastUpdated":1761799104000}'),n={name:"llm/grok.md"};function o(h,a,r,p,k,d){return t(),i("div",null,a[0]||(a[0]=[e(`<h1 id="grok-平台" tabindex="-1">Grok 平台 <a class="header-anchor" href="#grok-平台" aria-label="Permalink to &quot;Grok 平台&quot;">​</a></h1><h2 id="接口地址" tabindex="-1">接口地址 <a class="header-anchor" href="#接口地址" aria-label="Permalink to &quot;接口地址&quot;">​</a></h2><div class="language-curl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">curl</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>POST http://&lt;你的IP&gt;:&lt;你的端口&gt;/grok/v1/chat/completions</span></span></code></pre></div><h2 id="模型列表" tabindex="-1">模型列表 <a class="header-anchor" href="#模型列表" aria-label="Permalink to &quot;模型列表&quot;">​</a></h2><ul><li><code>grok-3</code>：快速回应模式</li><li><code>grok-4-auto</code>：最佳模式，智能调用思考、画图、联网搜索等能力</li><li><code>grok-4</code>：专家模式，智能调用思考、画图、联网搜索等能力</li><li><code>grok-4-mini-thinking-tahoe</code>：Grok 4 快速模型</li></ul><h2 id="模型参数" tabindex="-1">模型参数 <a class="header-anchor" href="#模型参数" aria-label="Permalink to &quot;模型参数&quot;">​</a></h2><p>可指定下面参数，使用 <code>-</code> 连接符把参数连接起来，例如：<code>grok-4-deepsearch</code></p><ul><li><code>deepsearch</code>：调用深度研究能力，<strong>全系模型</strong>都可指定</li></ul><h2 id="调用示例" tabindex="-1">调用示例 <a class="header-anchor" href="#调用示例" aria-label="Permalink to &quot;调用示例&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --location</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --request</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> POST</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;http://&lt;你的IP&gt;:&lt;你的端口&gt;/grok/v1/chat/completions&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--header </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Type: application/json&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--header </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Authorization: &lt;你的许可证&gt;&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--data-raw </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;messages&quot;: [{&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;你是什么模型&quot;}],</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;model&quot;: &quot;grok-4&quot;,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;stream&quot;: true</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&#39;</span></span></code></pre></div><h2 id="平台配置" tabindex="-1">平台配置 <a class="header-anchor" href="#平台配置" aria-label="Permalink to &quot;平台配置&quot;">​</a></h2><ul><li><p>Grok 会话最大上下文（单位：K）</p><p>由于官网上下文有限制，所以系统后台可以指定 Grok 上下文超过多少 K，以文件的方式上传上下文内容，这样就可以进一步的扩大上下文的长度。</p><p><img src="`+l+'" alt="3721744442804_.pic.jpg"></p></li></ul>',12)]))}const u=s(n,[["render",o]]);export{g as __pageData,u as default};
